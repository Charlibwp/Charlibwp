Fungsi
Sebuah fungsi terdiri dari komponen-komponen sebagai berikut:

Nama fungsi, akan dipakai untuk “memanggil” fungsi tersebut jika diperlukan.
Type kembalian, yang akan dipakai sebagai “kontrak” antara pemanggil dan fungsi.
Parameter (tidak harus ada), yang menjadi “modal” dari fungsi untuk melakukan komputasi.
Badan fungsi, yaitu deretan instruksi yang akan dieksekusi saat fungsi dipakai.
Nama fungsi, parameter dan type kembalian mencerminkan konsep fungsi dalam matematika, yaitu suatu pemetaan dari suatu nilai menjadi nilai lain. Misalnya Inverse(X) yang menghasilkan -X. Nama fungsi, parameter dan type kembalian disebut sebagai spesifikasi dari fungsi, harus dijelaskan dengan baik dalam bentuk komentar.

Dari komponen-komponen tersebut, fungsi akan mempunyai pola penulisan sebagai berikut: 

<type-kembalian> Nama-fungsi (list parameter dipisahkan tanda koma) {
/* Spesifikasi: penjelasan ringkas tentang apa yang dilakukan fungsi */
 
    return <nilai>;
}
Sebuah fungsi akan mengirimkan nilai hasil komputasi dengan instruksi return. Nilai ini akan dapat dimanfaatkan oleh pemanggilnya, yaitu dengan: dipakai pada suatu ekspresi, atau disimpan dalam sebuah variabel, atau dituliskan.

Berikut ini adalah contoh sebuah program utama dalam bahasa C (main) yang memanfaatkan sebuah fungsi yang melakukan penjumlahan dua buah integer, dan sebuah fungsi yang mengirimkan hasil inkremen dari nilai yang diberikan padanya. Pada program di bawah ini ada dua buah fungsi, yaitu:

Fungsi bernama add yang akan menerima dua buah integer sebagai parameter, dan mengirimkan hasil penjumlahannya.
Fungsi bernama inkremen, yang akan mengirimkan hasil penambahan 1 dari parameter yang diberikan.
/* File: fadd.c */
/* Penulis : Bu Dengklek, email inge@bebras.or.id */
/* Deskripsi : */
/* Fungsi yang menjumlahkan a+b */
#include<stdio.h>
 
int add (int a, int b) {
  /* fungsi bernama add yang menerima dua integer yaitu a dan b */
  /* dan mengirimkan hasil penjumlahan a+b */
  return(a+b);
}
 
int inkremen (int a) {
  /* Mengirimkan nilai a yang sudah ditambah dengan 1; perhatikan bahwa nilai a TIDAK DIUBAH*/
  return (a+1);
}
/************************/
int main() {
  int x=10;
  int y=25;
  /* pemakaian/pemanggulan fungsi add */
  printf("Hasil penjumlahan x+y = %d", add(x,y)); 
  printf("Hasil penjumlahan 3+2 = %d", add(3,2));
  
  /* pemakaian/pemanggilan fungsi inkremen */
  printf("nilai x   : %d\n", x);
  printf("nilai x  setelah ditambah 1 : %d\n", inkremen(x));
  printf("nilai 5  setelah ditambah 1 : %d\n", inkremen(5));
 
  return 0;
}
Contoh di atas mungkin belum terasa manfaatnya bagi Anda karena komputasi yang dilakukan oleh fungsi sangat sederhana dan hanya 1 baris saja. Bayangkan jika instruksi yang dikerjakan sangat banyak, seperti halnya teks lampiran, maka akan mengganggu pembacaan program utama. Dengan membungkus menjadi fungsi, teks program utama akan lebih mudah dibaca yaitu hanya dengan memanggil (menyebutkan) nama fungsi berikut parameternya.

Selain fungsi yang Anda tuliskan sendiri, bahasa C menyediakan fungsi yang siap pakai (Anda tidak perlu menuliskan body fungsi), yang dikelompokkan dan siap dipakai dengan menuliskan "header file" yang sesuai. https://en.wikipedia.org/wiki/C_standard_library.

Fungsi yang sering dibutuhkan pemrogram adalah fungsi untuk membangkitkan bilangan random. Dalam library standar bahasa C, fungsi int rand(void) mengirimkan bilangan pseudo-random dengan rentang nilai 0 s.d RAND_MAX. RAND_MAX adalah sebuah konstanta yang mungkin bervariasi nilainya tergantung implementasi, tetapi setidaknya 32767. Berikut ini contoh program untuk membangkitkan bilangan random dengan rentang nilai MIN sampai MAX. Berikut ini contoh program untuk membangkitkan bilangan random dengan rentang nilai MIN sampai MAX dengan memanfaatkan operator modulo (sisa pembagian) yaitu %.

/* File: random.c */
/* Penulis : Bu Dengklek, email inge@bebras.or.id */
/* Deskripsi : */
/* Pemakaian standard library untuk membangkitkan bilangan random */
#include<stdio.h>
#include <stdlib.h> 
/************************/
int main() {
   const int MIN=1; 
   const int MAX=100; 
   /* Program akan membangkitkan 5 bilangan random antar MIN sampai MAX  */ 
    for(int i = 0; i<5; i++) 
        printf(" %d ", rand()%MAX + MIN); 
  return 0;
}


Rangkuman Kompetensi

Mengenal komponen pembangun fungsi (spesifikasi, body/badan fungsi), dan memahami bagaimana mendefinisikan fungsi dalam bahasa C.
Mengenal, mendefinisikan dan memakai fungsi dalam bahasa C.
Memahami fungsi sebagai perwujudan konsep fungsi dalam matematika, dan memahami makna parameter yang dituliskan pada definisi fungsi, dan pemakaian parameter saat fungsi dipanggil. Fungsi melakukan komputasi dan mengirimkan hasilnya. Walaupun dalam bahasa C dimungkinkan untuk mengubah parameter (akan dibahas pda prosedur), fungsi sebaiknya tidak mengubah nilai parameter.
Kelak, akan dikenal sebagai passing parameter by value.  Khusus tentang parameter, Anda perlu mulai membaca bacaan pada Parameter (computer programming)


Aktivitas kreatif 

Cobalah beberapa fungsi yang disediakan dalam library C, misalnya fungsi untuk melakukan perhitungan matematika yang tersedia dalam <math.h>  dan beberapa terkait komputasi terhadap waktu yang tersedia pada <time.h>


Inilah Computational Thinking!

Fungsi menunjukkan suatu abstraksi, di mana spesifikasi fungsi akan mewakili sekumpulan proses komputasi yang dilakukan. Oleh karena itu, pemilihan nama fungsi menjadi sangat penting, karena harus mencerminkan apa yang dilakukan oleh fungsi itu. Parameter fungsi memungkinkan fungsi dapat melakukan komputasi sesuai dengan nilai parameter yang diberikan. Ini akan sangat berguna saat Anda melakukan pemodelan dan simulasi, salah satu aspek penting dari Computational Thinking. Anda dapat membangun model komputasi yang sama, yang akan dieksekusi dengan berbagai nilai parameter. Perubahan parameter dan hasil komputasi akan memungkinkan Anda melakukan simulasi dengan berbagai nilai parameter, untuk menghasilkan suatu konklusi atau memilih yang paling optimal.

Dengan menuliskan sebuah program menjadi beberapa Fungsi, Anda melakukan dekomposisi sebuah program menjadi  modul program yang lebih kecil, di mana setiap fungsi akan melakukan komputasi dengan spesifikasi tertentu yang jelas. 

